package main

import (
	"encoding/json"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// PanelState —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
type PanelState struct {
	MessageID int   `json:"message_id"`
	ChatID    int64 `json:"chat_id"`
}

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	exePath, err := os.Executable()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É: %v", err)
	}
	logPath := filepath.Join(filepath.Dir(exePath), "tbot-controls-pc.log")
	logFile, err := os.OpenFile(logPath, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0666)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞: %v", err)
	}
	defer logFile.Close()
	log.SetOutput(logFile)
	log.Println("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

	// –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
	err = godotenv.Load("settings.env")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ settings.env: %v", err)
	}

	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
	}
	userIDStr := os.Getenv("TELEGRAM_USER_ID")
	if userIDStr == "" {
		log.Fatal("TELEGRAM_USER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
	}
	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è TELEGRAM_USER_ID –≤ —á–∏—Å–ª–æ: %v", err)
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = false
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí§", "hibernate"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚èØÔ∏è", "play_pause"),
			tgbotapi.NewInlineKeyboardButtonData("üîâ", "volume_down"),
			tgbotapi.NewInlineKeyboardButtonData("üîä", "volume_up"),
		),
	)

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	imagePath := filepath.Join(filepath.Dir(exePath), "tbot-picture.jpg")

	// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
	panelState := loadPanelState(exePath)

	if panelState.MessageID != 0 && panelState.ChatID == userID {
		log.Println("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
		// Check if the image file exists to determine if we are dealing with a photo message or a text message.
		_, imageErr := os.Stat(imagePath)
		isImagePresent := imageErr == nil

		var err error
		if isImagePresent {
			// Attempt to edit the reply markup of the existing photo message.
			editMarkup := tgbotapi.NewEditMessageReplyMarkup(userID, panelState.MessageID, keyboard)
			_, err = bot.Request(editMarkup)
		} else {
			// Attempt to edit the reply markup of the existing text message.
			// The existing sendOrEditMessage function does this for messageID != 0 and will send a new one if editing fails.
			sendOrEditMessage(bot, userID, panelState.MessageID, "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö", keyboard, exePath)
			// No need to continue the outer if/else, as sendOrEditMessage handles the success/failure and new message sending.
			goto EndOfPanelUpdate // Use goto to skip the rest of the block
		}

		if err != nil {
			if strings.Contains(err.Error(), "message is not modified") {
				log.Println("–ü–∞–Ω–µ–ª—å —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
			} else {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞): %v", err)
				log.Println("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
				sendInitialMessage(bot, userID, keyboard, imagePath, exePath)
			}
		} else {
			log.Println("–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
		}
	} else {
		log.Println("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
		sendInitialMessage(bot, userID, keyboard, imagePath, exePath)
	}
EndOfPanelUpdate:

	for update := range updates {
		if update.CallbackQuery != nil {
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, update.CallbackQuery.Data)
			if _, err := bot.Request(callback); err != nil {
				log.Println(err)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if update.CallbackQuery.From.ID != userID {
				log.Printf("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", update.CallbackQuery.From.ID)
				continue
			}

			log.Printf("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: %s", update.CallbackQuery.Data)

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
			switch update.CallbackQuery.Data {
			case "play_pause":
				if err := SendMediaKey(0xB3); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã Play/Pause: %v", err)
				} else {
					log.Printf("–ö–æ–º–∞–Ω–¥–∞ Play/Pause –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
				}
			case "hibernate":
				if err := HibernatePC(); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–∏–±–µ—Ä–Ω–∞—Ü–∏–∏: %v", err)
				} else {
					log.Printf("–ö–æ–º–∞–Ω–¥–∞ –≥–∏–±–µ—Ä–Ω–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
				}
			case "volume_down":
				if err := SendVolumeDownKey(); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã Volume Down: %v", err)
				} else {
					log.Printf("–ö–æ–º–∞–Ω–¥–∞ Volume Down –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (5 –Ω–∞–∂–∞—Ç–∏–π)")
				}
			case "volume_up":
				if err := SendVolumeUpKey(); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã Volume Up: %v", err)
				} else {
					log.Printf("–ö–æ–º–∞–Ω–¥–∞ Volume Up –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (5 –Ω–∞–∂–∞—Ç–∏–π)")
				}
			}
		}
	}

	log.Println("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
}

// PanelState —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
// type PanelState struct {
// 	MessageID int   `json:"message_id"`
// 	ChatID    int64 `json:"chat_id"`
// }

// loadPanelState –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞
func loadPanelState(exePath string) PanelState {
	statePath := filepath.Join(filepath.Dir(exePath), "panel-state.json")
	data, err := os.ReadFile(statePath)
	if err != nil {
		if !os.IsNotExist(err) {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è '%s': %v", statePath, err)
		}
		return PanelState{}
	}

	var state PanelState
	if err := json.Unmarshal(data, &state); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è '%s': %v", statePath, err)
		return PanelState{}
	}

	log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ '%s': MessageID=%d", statePath, state.MessageID)
	return state
}

// savePanelState —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤ —Ñ–∞–π–ª
func savePanelState(exePath string, messageID int, chatID int64) {
	state := PanelState{
		MessageID: messageID,
		ChatID:    chatID,
	}

	data, err := json.MarshalIndent(state, "", "  ")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏: %v", err)
		return
	}

	statePath := filepath.Join(filepath.Dir(exePath), "panel-state.json")
	if err := os.WriteFile(statePath, data, 0666); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –≤ '%s': %v", statePath, err)
	} else {
		log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ '%s'", statePath)
	}
}

// sendInitialMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑) –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func sendInitialMessage(bot *tgbotapi.BotAPI, userID int64, keyboard tgbotapi.InlineKeyboardMarkup, imagePath, exePath string) {
	if _, err := os.Stat(imagePath); err == nil {
		// –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
		photoMsg := tgbotapi.NewPhoto(userID, tgbotapi.FilePath(imagePath))
		photoMsg.ReplyMarkup = keyboard
		photoMsg.Caption = "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö" // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
		if sentMsg, err := bot.Send(photoMsg); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: %v", err)
			// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			sendOrEditMessage(bot, userID, 0, "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö", keyboard, exePath)
		} else {
			log.Printf("–§–æ—Ç–æ '%s' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", imagePath)
			savePanelState(exePath, sentMsg.MessageID, sentMsg.Chat.ID)
		}
	} else if os.IsNotExist(err) {
		log.Printf("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", imagePath)
		sendOrEditMessage(bot, userID, 0, "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö", keyboard, exePath)
	} else {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '%s': %v. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", imagePath, err)
		sendOrEditMessage(bot, userID, 0, "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö", keyboard, exePath)
	}
}

// sendOrEditMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func sendOrEditMessage(bot *tgbotapi.BotAPI, userID int64, messageID int, text string, keyboard tgbotapi.InlineKeyboardMarkup, exePath string) {
	if messageID != 0 {
		editMsg := tgbotapi.NewEditMessageText(userID, messageID, text)
		editMsg.ReplyMarkup = &keyboard
		if _, err := bot.Request(editMsg); err != nil {
			if strings.Contains(err.Error(), "message is not modified") {
				log.Println("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
			} else {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
				// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				log.Println("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é.")
				msg := tgbotapi.NewMessage(userID, text)
				msg.ReplyMarkup = keyboard
				if sentMsg, err := bot.Send(msg); err != nil {
					log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
				} else {
					log.Printf("–ù–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
					savePanelState(exePath, sentMsg.MessageID, sentMsg.Chat.ID)
				}
			}
		} else {
			log.Println("–°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
		}
	} else {
		msg := tgbotapi.NewMessage(userID, text)
		msg.ReplyMarkup = keyboard
		if sentMsg, err := bot.Send(msg); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
		} else {
			log.Printf("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
			savePanelState(exePath, sentMsg.MessageID, sentMsg.Chat.ID)
		}
	}
}

// HibernatePC –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≥–∏–±–µ—Ä–Ω–∞—Ü–∏–∏ –ü–ö
func HibernatePC() error {
	cmd := exec.Command("rundll32.exe", "powrprof.dll,SetSuspendState", "0,1,0")
	return cmd.Run()
}
